// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/Skarlso/kube-cluster-sample/image_processor/pkg/models"
	"github.com/Skarlso/kube-cluster-sample/image_processor/pkg/providers"
)

type FakeImageStorer struct {
	GetImageStub        func(int) (*models.Image, error)
	getImageMutex       sync.RWMutex
	getImageArgsForCall []struct {
		arg1 int
	}
	getImageReturns struct {
		result1 *models.Image
		result2 error
	}
	getImageReturnsOnCall map[int]struct {
		result1 *models.Image
		result2 error
	}
	GetPersonFromImageStub        func(string) (*models.Person, error)
	getPersonFromImageMutex       sync.RWMutex
	getPersonFromImageArgsForCall []struct {
		arg1 string
	}
	getPersonFromImageReturns struct {
		result1 *models.Person
		result2 error
	}
	getPersonFromImageReturnsOnCall map[int]struct {
		result1 *models.Person
		result2 error
	}
	UpdateImageStub        func(int, int, models.Status) error
	updateImageMutex       sync.RWMutex
	updateImageArgsForCall []struct {
		arg1 int
		arg2 int
		arg3 models.Status
	}
	updateImageReturns struct {
		result1 error
	}
	updateImageReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageStorer) GetImage(arg1 int) (*models.Image, error) {
	fake.getImageMutex.Lock()
	ret, specificReturn := fake.getImageReturnsOnCall[len(fake.getImageArgsForCall)]
	fake.getImageArgsForCall = append(fake.getImageArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetImageStub
	fakeReturns := fake.getImageReturns
	fake.recordInvocation("GetImage", []interface{}{arg1})
	fake.getImageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImageStorer) GetImageCallCount() int {
	fake.getImageMutex.RLock()
	defer fake.getImageMutex.RUnlock()
	return len(fake.getImageArgsForCall)
}

func (fake *FakeImageStorer) GetImageCalls(stub func(int) (*models.Image, error)) {
	fake.getImageMutex.Lock()
	defer fake.getImageMutex.Unlock()
	fake.GetImageStub = stub
}

func (fake *FakeImageStorer) GetImageArgsForCall(i int) int {
	fake.getImageMutex.RLock()
	defer fake.getImageMutex.RUnlock()
	argsForCall := fake.getImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImageStorer) GetImageReturns(result1 *models.Image, result2 error) {
	fake.getImageMutex.Lock()
	defer fake.getImageMutex.Unlock()
	fake.GetImageStub = nil
	fake.getImageReturns = struct {
		result1 *models.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeImageStorer) GetImageReturnsOnCall(i int, result1 *models.Image, result2 error) {
	fake.getImageMutex.Lock()
	defer fake.getImageMutex.Unlock()
	fake.GetImageStub = nil
	if fake.getImageReturnsOnCall == nil {
		fake.getImageReturnsOnCall = make(map[int]struct {
			result1 *models.Image
			result2 error
		})
	}
	fake.getImageReturnsOnCall[i] = struct {
		result1 *models.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeImageStorer) GetPersonFromImage(arg1 string) (*models.Person, error) {
	fake.getPersonFromImageMutex.Lock()
	ret, specificReturn := fake.getPersonFromImageReturnsOnCall[len(fake.getPersonFromImageArgsForCall)]
	fake.getPersonFromImageArgsForCall = append(fake.getPersonFromImageArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetPersonFromImageStub
	fakeReturns := fake.getPersonFromImageReturns
	fake.recordInvocation("GetPersonFromImage", []interface{}{arg1})
	fake.getPersonFromImageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImageStorer) GetPersonFromImageCallCount() int {
	fake.getPersonFromImageMutex.RLock()
	defer fake.getPersonFromImageMutex.RUnlock()
	return len(fake.getPersonFromImageArgsForCall)
}

func (fake *FakeImageStorer) GetPersonFromImageCalls(stub func(string) (*models.Person, error)) {
	fake.getPersonFromImageMutex.Lock()
	defer fake.getPersonFromImageMutex.Unlock()
	fake.GetPersonFromImageStub = stub
}

func (fake *FakeImageStorer) GetPersonFromImageArgsForCall(i int) string {
	fake.getPersonFromImageMutex.RLock()
	defer fake.getPersonFromImageMutex.RUnlock()
	argsForCall := fake.getPersonFromImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImageStorer) GetPersonFromImageReturns(result1 *models.Person, result2 error) {
	fake.getPersonFromImageMutex.Lock()
	defer fake.getPersonFromImageMutex.Unlock()
	fake.GetPersonFromImageStub = nil
	fake.getPersonFromImageReturns = struct {
		result1 *models.Person
		result2 error
	}{result1, result2}
}

func (fake *FakeImageStorer) GetPersonFromImageReturnsOnCall(i int, result1 *models.Person, result2 error) {
	fake.getPersonFromImageMutex.Lock()
	defer fake.getPersonFromImageMutex.Unlock()
	fake.GetPersonFromImageStub = nil
	if fake.getPersonFromImageReturnsOnCall == nil {
		fake.getPersonFromImageReturnsOnCall = make(map[int]struct {
			result1 *models.Person
			result2 error
		})
	}
	fake.getPersonFromImageReturnsOnCall[i] = struct {
		result1 *models.Person
		result2 error
	}{result1, result2}
}

func (fake *FakeImageStorer) UpdateImage(arg1 int, arg2 int, arg3 models.Status) error {
	fake.updateImageMutex.Lock()
	ret, specificReturn := fake.updateImageReturnsOnCall[len(fake.updateImageArgsForCall)]
	fake.updateImageArgsForCall = append(fake.updateImageArgsForCall, struct {
		arg1 int
		arg2 int
		arg3 models.Status
	}{arg1, arg2, arg3})
	stub := fake.UpdateImageStub
	fakeReturns := fake.updateImageReturns
	fake.recordInvocation("UpdateImage", []interface{}{arg1, arg2, arg3})
	fake.updateImageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImageStorer) UpdateImageCallCount() int {
	fake.updateImageMutex.RLock()
	defer fake.updateImageMutex.RUnlock()
	return len(fake.updateImageArgsForCall)
}

func (fake *FakeImageStorer) UpdateImageCalls(stub func(int, int, models.Status) error) {
	fake.updateImageMutex.Lock()
	defer fake.updateImageMutex.Unlock()
	fake.UpdateImageStub = stub
}

func (fake *FakeImageStorer) UpdateImageArgsForCall(i int) (int, int, models.Status) {
	fake.updateImageMutex.RLock()
	defer fake.updateImageMutex.RUnlock()
	argsForCall := fake.updateImageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeImageStorer) UpdateImageReturns(result1 error) {
	fake.updateImageMutex.Lock()
	defer fake.updateImageMutex.Unlock()
	fake.UpdateImageStub = nil
	fake.updateImageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageStorer) UpdateImageReturnsOnCall(i int, result1 error) {
	fake.updateImageMutex.Lock()
	defer fake.updateImageMutex.Unlock()
	fake.UpdateImageStub = nil
	if fake.updateImageReturnsOnCall == nil {
		fake.updateImageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateImageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageStorer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getImageMutex.RLock()
	defer fake.getImageMutex.RUnlock()
	fake.getPersonFromImageMutex.RLock()
	defer fake.getPersonFromImageMutex.RUnlock()
	fake.updateImageMutex.RLock()
	defer fake.updateImageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImageStorer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ providers.ImageStorer = new(FakeImageStorer)
